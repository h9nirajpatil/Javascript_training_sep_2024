JavaScript has various operators that allow you to perform operations on variables and values. These operators can be categorized into several types, including arithmetic, assignment, comparison, logical, bitwise, and more. Let's break down each operator type and explain with examples in a detailed manner.

1. Arithmetic Operators
Arithmetic operators are used to perform basic mathematical operations like addition, subtraction, multiplication, etc.

Operator	Description
+	Addition
-	Subtraction
*	Multiplication
/	Division
%	Modulus (remainder)
**	Exponentiation (Power)
++	Increment (increases by 1)
--	Decrement (decreases by 1)

Examples:

let a = 10;
let b = 5;

console.log(a + b);  // Output: 15 (Addition)
console.log(a - b);  // Output: 5 (Subtraction)
console.log(a * b);  // Output: 50 (Multiplication)
console.log(a / b);  // Output: 2 (Division)
console.log(a % b);  // Output: 0 (Modulus: Remainder of 10/5)
console.log(a ** 2); // Output: 100 (Exponentiation: 10^2)

let x = 5;
x++;
console.log(x);  // Output: 6 (Increment by 1)

let y = 5;
y--;
console.log(y);  // Output: 4 (Decrement by 1)
Explanation:

a + b: Adds a and b, resulting in 15.
a % b: Finds the remainder when a is divided by b. Since 10 divides evenly by 5, the remainder is 0.
x++ increments the value of x by 1 after its current value is used.

_________________________________________________________________________________


2. Assignment Operators
Assignment operators are used to assign values to variables.

Operator	Description
=	Assign
+=	Add and assign
-=	Subtract and assign
*=	Multiply and assign
/=	Divide and assign
%=	Modulus and assign
**=	Exponentiation and assign

Examples:

let c = 10; // Assign value 10 to c
c += 5;     // Equivalent to c = c + 5; c becomes 15
console.log(c);  // Output: 15

c *= 2;     // Equivalent to c = c * 2; c becomes 30
console.log(c);  // Output: 30
Explanation:

c += 5: Adds 5 to c and assigns the result (15) back to c.
c *= 2: Multiplies c by 2 and assigns the result (30) back to c.

_________________________________________________________________________________


3. Comparison Operators
Comparison operators compare two values and return either true or false.

Operator	Description
==	Equal to (compares only value)
===	Strict equal to (compares value & type)
!=	Not equal to (compares only value)
!==	Strict not equal (compares value & type)
>	Greater than
<	Less than
>=	Greater than or equal to
<=	Less than or equal to

Examples:

let d = 10;
let e = '10';

console.log(d == e);   // Output: true (Only values are compared)
console.log(d === e);  // Output: false (Both values and types are compared)

console.log(d != 5);   // Output: true (10 is not equal to 5)
console.log(d !== e);  // Output: true (Different types)
console.log(d > 5);    // Output: true (10 is greater than 5)
console.log(d <= 10);  // Output: true (10 is equal to 10)
Explanation:

d == e: Since == only compares values and both are 10, it returns true.
d === e: === compares both value and type, and since d is a number and e is a string, it returns false.

_________________________________________________________________________________


4. Logical Operators
Logical operators are used to combine multiple conditions.

Operator	Description
&&	Logical AND
`	
!	Logical NOT

Examples:

let f = true;
let g = false;

console.log(f && g);  // Output: false (AND: both conditions must be true)
console.log(f || g);  // Output: true  (OR: one condition must be true)
console.log(!f);      // Output: false (NOT: negates the boolean value)
Explanation:

f && g: f is true but g is false, so && returns false.
f || g: Since one condition (f) is true, || returns true.
!f: The ! operator negates f, turning true into false.

_________________________________________________________________________________


5. Bitwise Operators
Bitwise operators work on binary digits (bits) of numbers.

Operator	Description
&	AND
`	`
^	XOR
~	NOT
<<	Left shift
>>	Right shift
>>>	Zero fill right shift

Examples:

let h = 5;  // In binary: 0101
let i = 1;  // In binary: 0001

console.log(h & i);   // Output: 1 (AND: 0101 & 0001 = 0001)
console.log(h | i);   // Output: 5 (OR: 0101 | 0001 = 0101)
console.log(h ^ i);   // Output: 4 (XOR: 0101 ^ 0001 = 0100)
console.log(~h);      // Output: -6 (NOT: Inverts all bits)
console.log(h << 1);  // Output: 10 (Left shift: 0101 << 1 = 1010)
console.log(h >> 1);  // Output: 2  (Right shift: 0101 >> 1 = 0010)
Explanation:

h & i: Both numbers are converted to binary and compared bit by bit using the AND operation.
h << 1: Left shifts the bits of h by 1, effectively multiplying by 2.

_________________________________________________________________________________


6. Ternary Operator
The ternary operator is a shorthand for an if-else condition.

Syntax	Description
condition ? expr1 : expr2	If condition is true, evaluate expr1; else evaluate expr2

Example:

let age = 18;
let canVote = (age >= 18) ? "Yes" : "No";
console.log(canVote);  // Output: Yes
Explanation:

If the condition age >= 18 is true, it returns "Yes"; otherwise, it returns "No".

_________________________________________________________________________________


7. Type Operators
Operator	Description
typeof	Returns the data type of a value
instanceof	Checks if an object is an instance of a class

Examples:

let j = "Hello";
console.log(typeof j); // Output: string

let arr = [1, 2, 3];
console.log(arr instanceof Array); // Output: true
Explanation:

typeof j: Returns the type of j, which is string.
arr instanceof Array: Checks if arr is an instance of the Array class.

_________________________________________________________________________________


8. String Operators
String concatenation can be performed using the + operator.

Example:

let firstName = "John";
let lastName = "Doe";
let fullName = firstName + " " + lastName;
console.log(fullName);  // Output: John Doe
Explanation:

The + operator joins firstName and lastName with a space in between, producing "John Doe".

_________________________________________________________________________________


9. Unary Operators
Unary operators operate on a single operand.

Operator	Description
+	Unary plus (converts operand to number)
-	Unary negation (negates the value)
++	Increment
--	Decrement

Example:

let k = "5";
console.log(+k);   // Output: 5 (Converts string to number)
Explanation:

+k: The unary plus converts the string "5" to a number.

_________________________________________________________________________________