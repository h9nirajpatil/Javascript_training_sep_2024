JavaScript Variables
Variables in JavaScript are containers used to store data values. You can declare variables using different keywords depending on your needs: var, let, const. JavaScript variables can hold various data types like numbers, strings, objects, etc.

__________________________________________________________________________________

Declaring Variables
Variables in JavaScript can be declared in four ways:

Automatically (Without declaration):

If you assign a value to a variable without declaring it, JavaScript will automatically create it.
However, it is not recommended to declare variables this way, as it can lead to errors.

x = 10; // Not recommended

__________________________________________________________________________________

Using var:

Before ES6 (2015), var was the only way to declare variables.
var has function-level scope and can be redeclared within the same scope.

var name = "John";

__________________________________________________________________________________

Using let:

Introduced in ES6, let allows you to declare block-scoped variables.
It cannot be redeclared within the same block.

let age = 25;

__________________________________________________________________________________

Using const:

const is used to declare constants, meaning the value of the variable cannot be changed once assigned.
It is also block-scoped like let.

const birthYear = 1990;

__________________________________________________________________________________

Best Practices for Variable Declaration
Always declare variables before use.
Use const if the variable's value will not change.
Use let if the variable's value can change but should remain block-scoped.
Use var only if you need to support older browsers.

__________________________________________________________________________________

Variable Names and Identifiers
JavaScript identifiers are unique names for variables, functions, or objects.

Rules for Identifiers:
Can contain letters, digits, underscores, and dollar signs.
Must start with a letter, $, or _.
Are case-sensitive (e.g., Name and name are different).
Cannot be a reserved keyword (like let, const, var, etc.).

Examples of Valid Identifiers:

let name = "Alice"; // Valid
let _age = 30;      // Valid
let $salary = 5000; // Valid

__________________________________________________________________________________

JavaScript Data Types
JavaScript variables can hold different types of values:

Numbers: For example, 100, 3.14
Strings: Text values, for example, "John Doe"
Booleans: true or false
Objects: Complex data types (arrays, objects)


Undefined: Variables that are declared but not assigned a value.

let x = 100;          // Number
let name = "John";    // String
let isStudent = true; // Boolean
let car;              // Undefined

__________________________________________________________________________________

Declaring and Assigning Values :

To declare a variable, use var, let, or const. You can assign a value either at the time of declaration or later.

Example:

let carName;           // Declaration without assignment
carName = "Volvo";     // Assignment of value

let person = "John";   // Declaration and assignment together

__________________________________________________________________________________

Re-declaring Variables :

If you declare a variable with var, you can re-declare it without losing its value:


var car = "Volvo";
var car; // Re-declaration is allowed with var
However, re-declaring with let or const will result in an error:

let car = "Volvo";
let car; // SyntaxError: Identifier 'car' has already been declared

__________________________________________________________________________________

Variable Initialization and Undefined :

When you declare a variable without assigning a value, it is initialized with the value undefined

Examples :

let carName;
console.log(carName); // Output: undefined

__________________________________________________________________________________

JavaScript Arithmetic with Variables
Just like in algebra, you can perform arithmetic operations with variables using operators like +, -, *, /.

Example:

let x = 5;
let y = 6;
let z = x + y;   // z is 11
You can also concatenate strings:


let fullName = "John" + " " + "Doe";  // fullName is "John Doe"
If you mix numbers and strings, JavaScript will treat the numbers as strings in some cases:

let result = "5" + 2 + 3;  // result is "523"
The first number "5" is a string, so the others are treated as strings and concatenated.


let result = 2 + 3 + "5";  // result is "55"
Here, 2 + 3 is evaluated first as numbers, resulting in 5, and then "5" is concatenated.

__________________________________________________________________________________

Special Characters in Variable Names
JavaScript allows the use of $ and _ in variable names.

Examples:

let $money = 1000;
let _name = "Alice";
$ is commonly used in libraries like jQuery, where $ is used as a shorthand for selecting HTML elements.

Example:

$("p").text("Hello");  // Selects all <p> elements and changes their text to "Hello"

__________________________________________________________________________________

Constants with const :

A const variable cannot be reassigned.
For example, const car = "Volvo"; means that car can never be changed to another value.
Note: Objects declared with const can still have their properties modified.


__________________________________________________________________________________

Example Code: Displaying a Variable Value
html
Copy code
<p id="demo"></p>

<script>
let carName = "Volvo";
document.getElementById("demo").innerHTML = carName;
</script>

__________________________________________________________________________________

Multiple Variables Declaration : 
You can declare multiple variables in one statement by separating them with commas.

Example:

let person = "John", carName = "Volvo", price = 200;
You can also declare them over multiple lines:


let person = "John",
    carName = "Volvo",
    price = 200;


__________________________________________________________________________________

JavaScript Identifiers and Reserved Words :

When naming variables, avoid using JavaScript reserved words like if, else, let, var, etc. These are reserved for special purposes in JavaScript code.

Example of Incorrect Usage:

let let = "value";  // Error: 'let' is a reserved word

__________________________________________________________________________________

JavaScript Arithmetic in Variables :

Variables can hold arithmetic expressions:

let sum = 5 + 3;  // sum is 8

__________________________________________________________________________________

Summary of Important Concepts:
Always declare variables with let, var, or const.
Use const for constants, let for block-scoped variables.
Variables can store different types of data, including numbers, strings, and objects.
JavaScript variable names are case-sensitive and follow specific rules for naming (letters, digits, $, _).

__________________________________________________________________________________